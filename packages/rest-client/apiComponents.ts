/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type AuthControllerIsEmailAvailablePathParams = {
  email: string;
};

export type AuthControllerIsEmailAvailableError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerIsEmailAvailableVariables = {
  pathParams: AuthControllerIsEmailAvailablePathParams;
};

export const authControllerIsEmailAvailable = (variables: AuthControllerIsEmailAvailableVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.AvailableDTO, AuthControllerIsEmailAvailableError, undefined, {}, {}, AuthControllerIsEmailAvailablePathParams>({
    url: "/auth/is-email-available/{email}",
    method: "get",
    ...variables,
    signal,
  });

export type AuthControllerGetSignupTokenPathParams = {
  tokenId: string;
};

export type AuthControllerGetSignupTokenError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerGetSignupTokenVariables = {
  pathParams: AuthControllerGetSignupTokenPathParams;
};

export const authControllerGetSignupToken = (variables: AuthControllerGetSignupTokenVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.RegisterTokenEntity, AuthControllerGetSignupTokenError, undefined, {}, {}, AuthControllerGetSignupTokenPathParams>({
    url: "/auth/signup-token/{tokenId}",
    method: "get",
    ...variables,
    signal,
  });

export type AuthControllerRegisterError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerRegisterVariables = {
  body: Schemas.RegistrationBody;
};

export const authControllerRegister = (variables: AuthControllerRegisterVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SuccessDTO, AuthControllerRegisterError, Schemas.RegistrationBody, {}, {}, {}>({
    url: "/auth/register",
    method: "post",
    ...variables,
    signal,
  });

export type AuthControllerVerifyEmailError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerVerifyEmailVariables = {
  body: Schemas.TokenIdBody;
};

export const authControllerVerifyEmail = (variables: AuthControllerVerifyEmailVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SuccessDTO, AuthControllerVerifyEmailError, Schemas.TokenIdBody, {}, {}, {}>({
    url: "/auth/verify-email",
    method: "post",
    ...variables,
    signal,
  });

export type AuthControllerChangePasswordError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerChangePasswordVariables = {
  body: Schemas.TokenIdPasswordBody;
};

export const authControllerChangePassword = (variables: AuthControllerChangePasswordVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SuccessDTO, AuthControllerChangePasswordError, Schemas.TokenIdPasswordBody, {}, {}, {}>({
    url: "/auth/change-password",
    method: "post",
    ...variables,
    signal,
  });

export type AuthControllerForgotPasswordError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerForgotPasswordVariables = {
  body: Schemas.EmailBody;
};

export const authControllerForgotPassword = (variables: AuthControllerForgotPasswordVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SuccessDTO, AuthControllerForgotPasswordError, Schemas.EmailBody, {}, {}, {}>({
    url: "/auth/forgot-password",
    method: "post",
    ...variables,
    signal,
  });

export type AuthControllerSendSignupEmailError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerSendSignupEmailVariables = {
  body: Schemas.SignupEmailBody;
};

export const authControllerSendSignupEmail = (variables: AuthControllerSendSignupEmailVariables, signal?: AbortSignal) =>
  apiFetch<Schemas.SuccessDTO, AuthControllerSendSignupEmailError, Schemas.SignupEmailBody, {}, {}, {}>({
    url: "/auth/send-signup-email",
    method: "post",
    ...variables,
    signal,
  });

export const operationsByTag = {
  auth: {
    authControllerIsEmailAvailable,
    authControllerGetSignupToken,
    authControllerRegister,
    authControllerVerifyEmail,
    authControllerChangePassword,
    authControllerForgotPassword,
    authControllerSendSignupEmail,
  },
};
